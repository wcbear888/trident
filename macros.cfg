[gcode_macro EXCLUDE_OBJECT_END]
gcode:
   STATUS_READY
[gcode_macro EXCLUDE_OBJECT_START]
gcode:
  STATUS_PRINTING

[gcode_macro EXCLUDE_OBJECT_DEFINE]
gcode:
  STATUS_BUSY


[gcode_macro PROBE_CALI]
gcode:
   STATUS_CALIBRATING_Z
   G28
   PROBE_CALIBRATE 


[gcode_macro ENSTOP]
gcode:
  QUERY_ENDSTOPS

[gcode_macro T0]
gcode:



[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice

gcode:
  


  STATUS_BUSY
  M141 S49  #chamber fan
 #--------------------------------------------------------------------------------------------------------
  #--- read values provided by slicer
  {% set temp_bed     = params.BED|int %}     #*** Required. BED value must be provided by slicer
 # {% set temp_hotend  = params.HOTEND|int %}  #*** Required. HOTEND value must be provided by slicer
  {% set temp_hotend  = params.EXTRUDER|int %}  #*** Required. HOTEND value must be provided by slicer
  #
  #--------------------------------------------------------------------------------------------------------
  #--- do the usual stuff
 ### M190 S120                                   #*** Set bed temp and wait down
  M190 S{temp_bed}                            #*** Set bed temp and wait
  M109 S150                                   #*** Heat nozzle to 150 and wait
  G28 X Y Z                                         #*** Home all, probe bed, level the gantry and such
 ### Z_TILT_ADJUST
  G90                                         #*** Absolute positioning - don't remove
  BED_MESH_PROFILE LOAD=default               #*** Load mesh
  SKEW_PROFILE LOAD=default

#  G1 X10 Y10 Z20 F7000
#--------------------------------------------------------------------------------------------------------
  #--- set hotend to the temp provided by the slicer
  M109 S{temp_hotend}                         #*** Set extruder temp and wait

 

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice

gcode:
 
    STATUS_OFF
    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
    
    #   Check end position to determine safe directions to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}
    
    #  Commence PRINT_END
    M400                             ; wait for buffer to clear
    G92 E0                           ; zero the extruder
    G1 E-4.0 F3600                   ; retract
    G91                              ; relative positioning
    G0 Z{z_safe} F3600               ; move nozzle up
 #   G0 X{x_safe} Y{y_safe} F20000    ; move nozzle to remove stringing
    
    M104 S0                          ; turn off hotend
    M140 S0                          ; turn off bed
    M106 S0                          ; turn off fan
    G90                              ; absolute positioning
    G0 X{max_x / 2} Y{250} F3600   ; park nozzle at rear
    M117 Finished!
#  	Power_Off												 


[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
variable_probing:False
gcode:
 STATUS_MESHING
 SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probing VALUE=True
 BED_MESH_CALIBRATE_BASE
 SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probing VALUE=False
 

[gcode_macro G28]
rename_existing: G0028
variable_homing:False
gcode:
 {% set TARGET_TEMP = printer.extruder.target %}
 STATUS_CALIBRATING_Z
 STATUS_HOMING
 SET_GCODE_VARIABLE MACRO=G28 VARIABLE=homing VALUE=True
 G0028  { rawparams }
 SET_GCODE_VARIABLE MACRO=G28 VARIABLE=homing VALUE=False
 M109 S{ TARGET_TEMP }


 

	
[gcode_macro Power_On]
#打开电源
gcode:
	SET_PIN PIN=Power_pin VALUE=1
#	SET_PIN PIN=Power VALUE=1
	
[gcode_macro Power_Off]
#关闭电源
gcode:
#	M400                           ; wait for buffer to clear 			#等待当前移动完成
	#M104 0							#设置挤出机温度
	#M190 0							#设置热床温度
	M107							#关闭风扇
	TURN_OFF_HEATERS									#关闭所有加热器
	SET_PIN PIN=Power_pin VALUE=0						#关闭八爪鱼ps_on pin
#	SET_PIN PIN=Power_pi_pin17 VALUE=0					#关闭树莓派GPIO17
#	SET_PIN PIN=Power VALUE=0							#关闭树莓派GPIO17
	
	

[gcode_macro Emergency_stop]
#紧急停止
gcode:
	M112
	
#需要在流体中正确支持显示更新 - 不需要其他行。
[display_status]
#在 klipper 中启用暂停/恢复功能。这是一个单独的块，不需要其他行。
[pause_resume]
#####################################################################
# 	宏    暂停打印
#####################################################################



[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_minimum.y|float + 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 
	
#####################################################################
# 	宏    恢复打印
#####################################################################
[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}

#####################################################################
# 	宏    取消打印
#####################################################################
[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  MMU_END
  G91
  G1 Z20 F7800
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE
 # G28 X Y
  G90

[gcode_macro M141]
gcode:
    {% set s = params.S|default(0)|float %}
    SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={s}

[gcode_macro LOAD_FILAMENT]
variable_load_distance:  50
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E{load_distance} F{max_velocity} # fast-load
    G1 E{purge_distance} F{speed} # purge
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  70
variable_purge_distance:  25
gcode:
    MMU_EJECT
   # {% set speed = params.SPEED|default(300) %}
   # {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
   # SAVE_GCODE_STATE NAME=unload_state
   # G91
   # G92 E0
   # G1 E-{purge_distance} F{speed} # purge
   # G1 E-{unload_distance} F{max_velocity} # fast-unload
   # RESTORE_GCODE_STATE NAME=unload_state


[gcode_macro SET_ACTIVE_SPOOL]
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id
    )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}
